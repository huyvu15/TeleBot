[
{
	"uri": "//localhost:1313/vi/1-/1.1-api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": "Giới thiệu API API là viết tắt của Application Programming Interface (Giao diện lập trình ứng dụng), một phần mềm trung gian cho phép hai ứng dụng nói chuyện với nhau. Mỗi khi sử dụng một ứng dụng như Facebook, gửi tin nhắn tức thì hoặc kiểm tra thời tiết trên điện thoại, có nghĩa là bạn đang sử dụng API.\nĐể hình dung dễ hiểu hơn về API thì mọi người hình dung API nó giống như một cái hàm và có tham số cụ thể(Nếu không có giới hạn tham số thì API có thể yêu cầu mọi từ server).\nTùy theo loại API mà có giới hạn requests truy cập riêng\nServer thì như một đôi tai liên tục lắng nghe tin hiệu từ API và trả về những thứ theo yêu cầu thực hiện của API\n"
},
{
	"uri": "//localhost:1313/vi/1-/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Tạo ChatBot Quản lý chi tiêu qua Telegram Tổng quan Bạn có muốn có một trợ lý ảo để quản lý chi tiêu hàng ngày của mình? Trong workshop này, bạn sẽ học cách thiết kế và lập trình một chatbot trên Telegram, giúp bạn tiện lợi theo dõi và quản lý chi tiêu cá nhân mà không cần đăng nhập.\nTelegram là một ứng dụng nhắn tin phổ biến, mạnh mẽ và là lựa chọn lý tưởng để phát triển chatbot quản lý chi tiêu.\nCác Service sử dụng: 1. AWS Lambda Function: là dịch vụ điện toán phi máy chủ (serverless) do Amazon cung cấp, cho phép bạn chạy các đoạn mã mà không cần quản lý máy chủ. Với Lambda, bạn chỉ cần tải lên mã của mình và AWS sẽ lo phần còn lại, bao gồm việc cung cấp tài nguyên máy tính và tự động scale mã của bạn dựa trên nhu cầu.\n2. Amazon EventBridge: Giúp lên lịch và kiểm soát các sự kiện, chẳng hạn như kích hoạt Lambda mỗi đầu tháng.\n3. Amazon S3: kho lưu trữ dung lượng lớn, chi phí thấp và an toàn, phù hợp với nhiều nhu cầu lưu trữ dữ liệu.\n4. Amazon DynamoDB: Dịch vụ cơ sở dữ liệu NoSQL hiệu suất cao, tự động điều chỉnh quy mô theo nhu cầu.\n5. API Gateway: Dịch vụ quản lý API giúp tạo, xuất bản, duy trì và bảo mật các API ở bất kỳ quy mô nào.\nWorkshop sẽ tập trung vào các tính năng đơn giản, dễ thực hiện. Người dùng có thể phát triển thêm các tính năng khác dựa trên nhu cầu cá nhân.\nNgôn ngữ chính để phục vụ workshop này là python 3.10\nÝ tưởng: Viết một API Gateway để kết nối với telegram thông qua webhook. API đó được gắn với một lambda function có nhiệm vụ đọc và ghi dữ liệu, truy vấn kết quả truy vấn đến dynamodb. Đến một thời điểm nào cụ thể trong tháng chúng ta có thể tạo một lambda function khác để gửi tự động gửi đến người dùng những thông tin cơ bản mà họ đã chi tiêu trong tháng này.\nMột số những thống kê có thể kể đến:\nTổng số tiền chi tiêu trong tháng.\nTổng số tiền nợ trong tháng.\nTổng số tiền đổ xăng.\nvv \u0026hellip;.\nMột số lệnh có thể sử dụng: Các command:\n/chi 10000 | ăn sáng | 23-10-2024\n/no 10000 | tuấn long | ăn trưa\n/tongchi \u0026ndash;\u0026gt; tính tổng số tiền chi tiêu trong tháng\n/tongno \u0026ndash;\u0026gt; tính tổng số tiền nợ trong tháng\nNội dung Giới thiệu Tường lửa trong VPC Các bước chuẩn bị Lấy cookie từ shopee Tạo schedule cho EventBridge Dọn dẹp tài nguyên Bây giờ chúng ta sẽ cùng nhau đi qua các khái niệm cơ bản nhất của Lambda Function và API nhé.\n"
},
{
	"uri": "//localhost:1313/vi/4-/4.1-createec2/",
	"title": "Lấy mật khẩu ứng dụng Gmail",
	"tags": [],
	"description": "",
	"content": "Lấy mật khẩu ứng dụng Gmail Lấy mật khẩu ứng dụng theo hướng dẫn tại link: https://www.youtube.com/watch?v=fG43VdSGQX8\u0026amp;t=426s.\nSau đó lưu vào đâu đó để sau còn sửa code.\nPASSWORD = \u0026quot; \u0026quot;\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Tạo ChatBot Quản lý chi tiêu qua Telegram",
	"tags": [],
	"description": "",
	"content": "Tạo ChatBot Quản lý chi tiêu qua Telegram Tổng quan Bạn đã bao giờ nghĩ đến việc có một trợ lý ảo để quản lý chi tiêu hàng ngày của mình chưa? Trong bài lab workshop hôm nay sẽ hướng dẫn bạn biến ý tưởng thành hiện thực. Bằng cách thiết kế và lập trình một chatbot trên nền tảng Telegram, bạn sẽ không cần đăng nhập, thuận tiện trong việc sử dụng. Do bản thân mình sủ dụng telegram rất nhiều trong các công việc hằng ngày nên một chatbot có sẵn ở telegram sẽ là một lựa chọn lý tưởng giúp bạn theo dõi và quản lý chi tiêu các nhân một cách thông minh và hiệu quả.\nTelegram là một ứng dụng nhắn tin phổ biến và mạnh mẽ với nhiều ưu điểm vượt trội, khiến nó trở thành lựa chọn lý tưởng để phát triển và triển khai chatbot quản lý chi tiêu.\nCác Service sử dụng 1. AWS Lambda Function: là dịch vụ điện toán phi máy chủ (serverless) do Amazon cung cấp, cho phép bạn chạy các đoạn mã mà không cần quản lý máy chủ. Với Lambda, bạn chỉ cần tải lên mã của mình và AWS sẽ lo phần còn lại, bao gồm việc cung cấp tài nguyên máy tính và tự động scale mã của bạn dựa trên nhu cầu.\n2. Amazon EventBridge: EventBridge giúp chúng ta lên lịch và kiểm soát các sự kiện trong hệ thống của mình như điều khiển các lambda function chạy vào mỗi đầu tháng.\n3. Amazon S3: - một kho lưu trữ cho internet. Nó được thiết kế để cung cấp lưu trữ dung lượng lớn, chi phí thấp trên nhiều khu vực địa lý. Amazon S3 cung cấp cho các nhà phát triển và nhóm CNTT bộ lưu trữ đối tượng An toàn, Bền bỉ và có khả năng mở rộng cao.\nS3 gần như có thể lưu trữ dữ liệu không giới hạn (Theo quảng cáo của AWS). S3 có các cấp lưu trữ, tùy theo nhu cầu, theo tính chất của dữ liệu, thời gian truy cập thì giá sẽ rẻ hơn.\n4. Amazon DynamoDB: một dịch vụ cơ sở dữ liệu phi quan hệ NoSQL được quản lý hoàn toàn, có thể mở rộng cao và hiệu suất cao cho các ứng dụng cần tốc độ và khả năng mở rộng. Cơ sở dữ liệu này phản hồi chỉ trong vài mili giây ở mọi quy mô.\nKhi quy mô của cơ sở dữ liệu tăng hoặc giảm, DynamoDB sẽ tự động thay đổi quy mô để điều chỉnh phù hợp với thay đổi về công suất, trong khi vẫn duy trì hiệu năng ổn định. Nhờ đó, đây là sự lựa chọn phù hợp với các trường hợp sử dụng yêu cầu hiệu năng cao và quy mô linh hoạt.\n5. API Gateway: một dịch vụ được quản lý hoàn toàn bởi Amazon Web Services (AWS) giúp các nhà phát triển tạo, xuất bản, duy trì, giám sát và bảo mật các API ở bất kỳ quy mô nào. Đây là một điểm truy cập duy nhất để quản lý tất cả các yêu cầu từ client đến các dịch vụ backend, chẳng hạn như ứng dụng chạy trên Amazon EC2, AWS Lambda, hoặc bất kỳ điểm cuối web nào khác.\n\u0026ndash;\u0026gt; Tuy nhiên để đơn giản và demo một cách thuận tiện nhất có thể bài lab chỉ thực hiện một số những tính năng đơn giản và có thể thực hiện được ngay. Độc giả có thể dễ dàng phát triển thêm các tinh năng khác dựa theo từng nhu cầu và đặc điểm của bản thân.\nNgôn ngữ chính để phục vụ workshop này là python 3.10 Nội dung Giới thiệu Tường lửa trong VPC Các bước chuẩn bị Lấy Cookie từ shopee Tạo schema cho EventBridge Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/3-/3.1-createvpc/",
	"title": "Tạo S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Tạo S3 Bucket Truy cập giao diện AWS Management Console\nTìm S3 Chọn Bucket Chọn Create Bucket Điền các thông tin cho Buket\nĐặt tên Bucket là workshoph Tên Bucket phải là duy nhất và không được trùng với tên các bucket đã có.\nKéo xuống cuối và chọn Create Bucket "
},
{
	"uri": "//localhost:1313/vi/2-/",
	"title": "Tạo ChatBot trên Telegram",
	"tags": [],
	"description": "",
	"content": "Tạo ChatBot từ BotFather Mở Telegram và tìm kiếm FatherBot\nMở Telegram Chọn FatherBot Bấm nút Start để bắt đầu Gõ các lệnh để tương tác với Bot Father.\nGõ lệnh /newbot Tiếp tục nhập tên bot. Ở đây mình đặt tên cho bot là TeleBotchitieu_bot. Đây cũng chính là username của Bot Tên Bot phải là duy nhất và kết thúc bằng bot. Ví dụ TeleBot.\nCopy thông tin token của bot và lưu tạm ở một nơi nào đó. Token API bot của mình 7347673296:AAGfZlAMdqqh80K9X2sJkMYvVBna0EyjcYM\nNhấn vào đường dẫn để trỏ tới bot mới tạo. Vậy là sau một vài bước đơn giản chúng ta đã tạo được một con bot trên Telegram. Tiếp theo chúng ta sẽ thực hiện để con Bot này thực hiện các hành động theo ý muốn bằng cách tương tác với api thông qua webhooks.\n"
},
{
	"uri": "//localhost:1313/vi/3-/3.2-createsubnet/",
	"title": "Tạo Lambda Function",
	"tags": [],
	"description": "",
	"content": "Tạo Lambda Function Trong giao diện AWS Management Console\nChọn Lambda Trong giao diện Lambda Function\nChọn Function Chọn Create Function Thực hiện cấu hình Function\nFunction name, nhập Crawl_data Chọn Runtime Python 3.10 Chọn Create Function Hoàn thành tạo Function "
},
{
	"uri": "//localhost:1313/vi/4-/4.2-connectec2/",
	"title": "Trích xuất thông tin từ file json",
	"tags": [],
	"description": "",
	"content": "Trích xuất thông tin từ file json(Chỉ xem) Để trích xuất các thông tin theo ý muốn bạn cần có một mức hiểu biết nhất định về cấu trúc file json(thử bằng cách print(response.json())) từ đoạn json trả về để thực hiện đi lần lượt vào từng cái list, dictionary để lấy dữ liệu mong muốn. Công cụ hỗ trợ dễ dàng làm việc với file json hơn https://dev.2fbuff.com/ View một đoạn json trả về. {\u0026#39;error\u0026#39;: 0, \u0026#39;data\u0026#39;: {\u0026#39;order_data\u0026#39;: {\u0026#39;details_list\u0026#39;: [{\u0026#39;status\u0026#39;: {\u0026#39;status_label\u0026#39;: {\u0026#39;text\u0026#39;: \u0026#39;label_order_completed\u0026#39;, \u0026#39;tl\u0026#39;: False}, \u0026#39;header_text\u0026#39;: {\u0026#39;text\u0026#39;: \u0026#39;order_status_text_completed_thank_you_shopping\u0026#39;, \u0026#39;tl\u0026#39;: False}, \u0026#39;header_image\u0026#39;: \u0026#39;https://deo.shopeemobile.com/shopee/shopee-orderprocessing-live-vn/completed.png\u0026#39;, \u0026#39;list_view_status_label\u0026#39;: {\u0026#39;text\u0026#39;: \u0026#39;label_completed\u0026#39;, \u0026#39;tl\u0026#39;: False}}, \u0026#39;shipping\u0026#39;: {\u0026#39;tracking_info\u0026#39;: {\u0026#39;driver_phone\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;driver_name\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;ctime\u0026#39;: 1696224180, \u0026#39;description\u0026#39;: \u0026#39;Đơn hàng đã được giao thành công\u0026#39;, \u0026#39;type\u0026#39;: 0}, \u0026#39;is_multi_parcel\u0026#39;: False, \u0026#39;num_parcels\u0026#39;: 1, \u0026#39;parcel_no\u0026#39;: 1}, \u0026#39;info_card\u0026#39;: {\u0026#39;order_id\u0026#39;: 149752100291872, \u0026#39;order_list_cards\u0026#39;: [{\u0026#39;shop_info\u0026#39;: {\u0026#39;shop_id\u0026#39;: 48311894, \u0026#39;shop_name\u0026#39;: \u0026#39;Bra \u0026amp; Knickers\u0026#39;, \u0026#39;user_id\u0026#39;: 48313282, \u0026#39;username\u0026#39;: \u0026#39;anannshop\u0026#39;, \u0026#39;portrait\u0026#39;: \u0026#39;d664c852e1100082b09a13d09457d93d\u0026#39;, \u0026#39;shop_tag\u0026#39;: 3}, \u0026#39;order_id\u0026#39;: 149752100291872, \u0026#39;product_info\u0026#39;: {\u0026#39;item_groups\u0026#39;: [{\u0026#39;items\u0026#39;: [{\u0026#39;item_id\u0026#39;: 1602031702, \u0026#39;model_id\u0026#39;: 9613089074, \u0026#39;shop_id\u0026#39;: 48311894, \u0026#39;name\u0026#39;: \u0026#39;Khăng Choàng Cổ Dạ Len Quàng Nam Nữ Cao Cấp Nhiều Màu Cashmere Hàng Đẹp Giá Rẻ\u0026#39;, \u0026#39;model_name\u0026#39;: \u0026#39;8 - da sáng\u0026#39;, \u0026#39;image\u0026#39;: \u0026#39;7e3e7ed202c224dae7641bab1ab0eefd\u0026#39;, \u0026#39;amount\u0026#39;: 1, \u0026#39;ext_info\u0026#39;: {\u0026#39;add_on_deal_id\u0026#39;: 0, \u0026#39;is_add_on_sub_item\u0026#39;: False, \u0026#39;free_return_day\u0026#39;: 0, \u0026#39;is_wholesale\u0026#39;: False, \u0026#39;is_pre_order\u0026#39;: False, \u0026#39;is_membership_gift\u0026#39;: False, \u0026#39;is_free_return\u0026#39;: False}, \u0026#39;status\u0026#39;: 1, \u0026#39;item_price\u0026#39;: 2890000000, \u0026#39;price_before_discount\u0026#39;: 6500000000, \u0026#39;order_price\u0026#39;: 2890000000, \u0026#39;snapshot_id\u0026#39;: 16436071430}], \u0026#39;num_items\u0026#39;: 1}], \u0026#39;total_num_items\u0026#39;: 1}}], \u0026#39;product_count\u0026#39;: 1, \u0026#39;subtotal\u0026#39;: 1445000000, \u0026#39;final_total\u0026#39;: 1445000000}, \u0026#39;primary_buttons\u0026#39;: [{\u0026#39;id\u0026#39;: 24}], \u0026#39;guarantee\u0026#39;: {\u0026#39;learn_more_url\u0026#39;: \u0026#39;https://shopee.vn/m/shopee-dam-bao\u0026#39;, \u0026#39;is_extend_enabled\u0026#39;: False}, \u0026#39;secondary_buttons\u0026#39;: [{\u0026#39;id\u0026#39;: 15}], \u0026#39;list_type\u0026#39;: 3}, ... } } Thực hiện trích xuất thông tin từ đoạn json thu được for i in range(0, 301, 5): params[\u0026#39;offset\u0026#39;] = i response = requests.get(\u0026#39;https://shopee.vn/api/v4/order/get_all_order_and_checkout_list\u0026#39;, headers=headers, params=params, cookies=cookies) if response.status_code == 200: data = response.json().get(\u0026#39;data\u0026#39;).get(\u0026#39;order_data\u0026#39;).get(\u0026#39;details_list\u0026#39;) if data is not None: for j in range(len(data)): order_info = data[j] main = order_info.get(\u0026#39;info_card\u0026#39;).get(\u0026#39;order_list_cards\u0026#39;)[0].get(\u0026#39;product_info\u0026#39;).get(\u0026#39;item_groups\u0026#39;)[0].get(\u0026#39;items\u0026#39;)[0] main1 = order_info.get(\u0026#39;info_card\u0026#39;).get(\u0026#39;order_list_cards\u0026#39;)[0].get(\u0026#39;shop_info\u0026#39;) main2 = order_info.get(\u0026#39;shipping\u0026#39;, {}).get(\u0026#39;tracking_info\u0026#39;, {}) product_id = main.get(\u0026#39;item_id\u0026#39;) shop_id = main1.get(\u0026#39;shop_id\u0026#39;) shop_name = main1.get(\u0026#39;shop_name\u0026#39;) name = main.get(\u0026#39;name\u0026#39;) price = main.get(\u0026#39;item_price\u0026#39;) / 100000 amount = main.get(\u0026#39;amount\u0026#39;) shop_name = main1.get(\u0026#39;shop_name\u0026#39;) status = main2.get(\u0026#39;description\u0026#39;, \u0026#39;Đã hủy\u0026#39;) if status == \u0026#39;Đã hủy\u0026#39;: status = None time = None else: time = datetime.datetime.fromtimestamp(main2.get(\u0026#39;ctime\u0026#39;, 0)) products.append({ \u0026#39;product_id\u0026#39;: product_id, \u0026#39;shop_id\u0026#39;: shop_id, \u0026#39;product_name\u0026#39;: name, \u0026#39;shop_name\u0026#39;: shop_name, \u0026#39;price\u0026#39;: price, \u0026#39;amount\u0026#39;: amount, \u0026#39;status\u0026#39;: status, \u0026#39;time\u0026#39;: time }) Thi thoảng code sẽ bị lỗi do shopee thay đổi cấu trúc của file json trả về. Khi gặp lỗi chỉ cần xóa cái key-value đó đi là được. Thông thường sẽ không có thay đổi nhiều.\n"
},
{
	"uri": "//localhost:1313/vi/1-/1.2-webhook/",
	"title": "Webhook",
	"tags": [],
	"description": "",
	"content": "Webhook Webhook là một công nghệ rất tiện dụng trong việc triển khai các phản ứng sự kiện (event) trên website của bạn. Webhook cung cấp một giải pháp giúp ứng dụng server-side thông báo cho ứng dụng phía client-side khi có sự kiện phát sinh đã xảy ra trên máy chủ (event reaction). Cũng chính vì vậy, ứng dụng client-side sẽ không cần phải liên tục hỏi hoặc check với ứng dụng server-side.\nNhiều người cũng thường gọi Webhook là “Reverse APIs”. Thông thường đối với các API, ứng dụng client-side sẽ gọi ứng dụng server-side. Tuy nhiên khi có webhook, phía server-side sẽ gọi webhook (end-point URL được cung cấp bởi ứng dụng client-side), ví dụ: ứng dụng server-side gọi ứng dụng client-side.\n"
},
{
	"uri": "//localhost:1313/vi/3-/3.3-createigw/",
	"title": "Add Layer",
	"tags": [],
	"description": "",
	"content": "Add Layer Trong giao diện Crawl_data\nKéo xuống cuối chọn Add Layer Thực hiện add layer\nChọn Specify an ARN Mở tab mới và truy cập link https://github.com/keithrozario/Klayers Trong phần README chọn List of ARNs Chọn version Python 3.10 Chọn region Singapore Chọn html Chọn các ARNs cần thiết\nRequest Boto3 Pandas Lần lượt copy và lặp lại add layer ở bước 2 vào Specify an ARN\nChọn Verify(nếu thấy hiện như dưới ảnh là ok) Sau đó nhấn Add. Sau khi thêm xong các layer sẽ có giao diện đủ 3 layer như sau: "
},
{
	"uri": "//localhost:1313/vi/3-/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Các bước chuẩn bị Trong bài thực hành này, chúng ta sẽ xây dựng một mô hình theo sơ đồ bên dưới:\nNội dung Tạo S3 Bucket Tạo Lambda Function Add Layer "
},
{
	"uri": "//localhost:1313/vi/1-/1.3-layer/",
	"title": "Layer",
	"tags": [],
	"description": "",
	"content": "Về Layer Layer ở đây là các package, bên ngoài các method gốc của ngôn ngữ lập trình thông thường. Để đơn giản hãy tưởng tượng layer tương tự như các thư viện trong python và mình chỉ việc import vào và sử dụng nó như bình thường(mặc định lambda function không có sẵn các thư viện mà phải thêm vào thông qua layers).\nMỗi Lambda function được add tối đa 5 layers.\nMột lambda function không thể thêm nhiều layer quá số bit cho trước nếu thêm quá sẽ hiện cảnh báo đỏ.\nCó 2 cách để thêm layer:\nThêm trực tiếp bằng cách zip các file trong thư viện gốc rồi đẩy lên layer (tốn thời gian để nén và có khi ko ăn với lambda hoặc cũng có thể zip thiếu). Cũng zip lại và tải trực tiếp vào lambda function. The layer bằng cách copy ARNs(của những người đã tạo trước đó) cùng với version tương ứng. Link ARNs tham khảo: https://github.com/keithrozario/Klayers\n"
},
{
	"uri": "//localhost:1313/vi/4-/4.3-natgateway/",
	"title": "Thêm code vào lambda function",
	"tags": [],
	"description": "",
	"content": "Thêm code vào lambda function Truy cập Lambda Function\nChọn Function Chọn Crawl_data Kéo xuống và copy đoạn code sau vào lambda function, sửa thêm 1 số cái: Với cookie, header, params, response để copy ở phần trước đó.(nhớ tag lại) Thay đổi email cần gửi và email nhận. import json import requests import datetime import time import boto3 import os from io import BytesIO import pandas as pd import io import smtplib def crawl(): \u0026#34;\u0026lt;cookie-api\u0026gt;\u0026#34;# Lấy từ shopee từ bước products = [] for i in range(0, 301, 5): params[\u0026#39;offset\u0026#39;] = i response = requests.get(\u0026#39;https://shopee.vn/api/v4/order/get_all_order_and_checkout_list\u0026#39;, headers=headers, params=params, cookies=cookies) if response.status_code == 200: data = response.json().get(\u0026#39;data\u0026#39;).get(\u0026#39;order_data\u0026#39;).get(\u0026#39;details_list\u0026#39;) if data is not None: for j in range(len(data)): order_info = data[j] main = order_info.get(\u0026#39;info_card\u0026#39;).get(\u0026#39;order_list_cards\u0026#39;)[0].get(\u0026#39;product_info\u0026#39;).get(\u0026#39;item_groups\u0026#39;)[0].get(\u0026#39;items\u0026#39;)[0] main1 = order_info.get(\u0026#39;info_card\u0026#39;).get(\u0026#39;order_list_cards\u0026#39;)[0].get(\u0026#39;shop_info\u0026#39;) main2 = order_info.get(\u0026#39;shipping\u0026#39;, {}).get(\u0026#39;tracking_info\u0026#39;, {}) product_id = main.get(\u0026#39;item_id\u0026#39;) shop_id = main1.get(\u0026#39;shop_id\u0026#39;) shop_name = main1.get(\u0026#39;shop_name\u0026#39;) name = main.get(\u0026#39;name\u0026#39;) price = main.get(\u0026#39;item_price\u0026#39;) / 100000 amount = main.get(\u0026#39;amount\u0026#39;) shop_name = main1.get(\u0026#39;shop_name\u0026#39;) status = main2.get(\u0026#39;description\u0026#39;, \u0026#39;Đã hủy\u0026#39;) if status == \u0026#39;Đã hủy\u0026#39;: status = None time = None else: time = datetime.datetime.fromtimestamp(main2.get(\u0026#39;ctime\u0026#39;, 0)) products.append({ \u0026#39;product_id\u0026#39;: product_id, \u0026#39;shop_id\u0026#39;: shop_id, \u0026#39;product_name\u0026#39;: name, \u0026#39;shop_name\u0026#39;: shop_name, \u0026#39;price\u0026#39;: price, \u0026#39;amount\u0026#39;: amount, \u0026#39;status\u0026#39;: status, \u0026#39;time\u0026#39;: time }) return products def save_to_s3(products): df = pd.DataFrame(products) csv_buffer = io.BytesIO() df.to_csv(csv_buffer, index=False, encoding=\u0026#39;utf-8-sig\u0026#39;) csv_buffer.seek(0) csv_buffer_bytes = csv_buffer.getvalue() s3 = boto3.client(\u0026#39;s3\u0026#39;) bucket_name = \u0026#39;do-lab\u0026#39; file_key = \u0026#39;bill1.csv\u0026#39; s3.put_object(Body=csv_buffer_bytes, Bucket=bucket_name, Key=file_key, ContentType=\u0026#39;text/csv; charset=utf-8\u0026#39;) df[\u0026#39;time\u0026#39;] = pd.to_datetime(df[\u0026#39;time\u0026#39;]) start_of_current_month = pd.Timestamp.now().replace(day=1) start_of_previous_month = start_of_current_month - pd.offsets.MonthBegin(1) data_previous_month = df[df[\u0026#39;time\u0026#39;].dt.to_period(\u0026#39;M\u0026#39;) == start_of_previous_month.to_period(\u0026#39;M\u0026#39;)] total_price_previous_month = data_previous_month[\u0026#39;price\u0026#39;].sum() return total_price_previous_month def lambda_handler(event, context): products = crawl() result = save_to_s3(products) def send_email(subject, msg, toEmail): try: server = smtplib.SMTP(\u0026#39;smtp.gmail.com:587\u0026#39;) server.ehlo() server.starttls() server.login(FROM_EMAIL_ADDRESS, PASSWORD) message = \u0026#39;Subject: {}\\n\\n{}\u0026#39;.format(subject, msg) server.sendmail(FROM_EMAIL_ADDRESS, toEmail, message) server.quit() print(\u0026#34;Success: Email sent!\u0026#34;) except: print(\u0026#34;Email failed to send.\u0026#34;) FROM_EMAIL_ADDRESS = \u0026#34;\u0026lt;email-gửi\u0026gt;\u0026#34; TO_EMAIL_ADDRESSES = \u0026#34;\u0026lt;email-nhận\u0026gt;\u0026#34; PASSWORD = \u0026#34;\u0026lt;mật-khẩu-ứng-dụng-gmail\u0026#34; subject = \u0026#34;Notification of spending on shopping\u0026#34; msg = \u0026#34;Hello \\nYou are spend \u0026#34;+ str(result)+ \u0026#34; for shopping activities at shopee\u0026#34; send_email(subject, msg, TO_EMAIL_ADDRESSES) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps(\u0026#39;Hello from Lambda!\u0026#39;) } Các phần cần sửa:\nbucket_name = \u0026laquo;do_lab\u0026raquo; // cái này để tùy ý bucket theo mong muốn.\n\u0026ldquo;\u0026laquo;cookie-api\u0026raquo;: Chỗ đã copy từ trang rút gọn api\nFROM_EMAIL_ADDRESS = \u0026ldquo;\u0026laquo;email-gửi\u0026raquo;\u0026rdquo;\nTO_EMAIL_ADDRESSES = \u0026ldquo;\u0026laquo;email-nhận\u0026raquo;\u0026rdquo;\nPASSWORD = \u0026ldquo;\u0026laquo;mật-khẩu-ứng-dụng-gmail\u0026raquo;\u0026rdquo;\nNhấn Deploy để lưu code: Code trên đã điều chỉnh để đơn giản nhất có thể là chỉ dùng để thu thập dữ liệu và xử lý đơn giản để tính được số tiền chi tiêu trong tháng trước đó và lưu file dữ liệu vào S3.\nCó thể phát triển thêm theo hướng là dùng thư viện pandas để vẽ các biểu đồ, doanh thu các ngày, phân tích đánh giá như sử dụng BI tool và gửi hết tất cả những phân tích đó qua email.\nKhi nhấn test code sẽ không chạy được và bị time out ngay lập tức. Lý do là do lambda function mặc định được cấu hình time out là 3s. Một funtion có thời gian timeout tối đa là 15p. Đây cùng là một trong những lý do lambda không được sử dụng để train các mô hình AI do thời gian time out tương đối thấp. Code trên thực hiện sẽ mất tầm 1p. Sau đây ta sẽ đi cấu hình thời gian time out cho Lambda.\nCấu hình time out Tại giao diện function chọn Configuration. Chọn General configuration. Chọn Edit. Nhập thông số: Description Increate amout time out. Memory 512. Time out 1. Nhấn Save. Hiện tại bạn có thể nhấn luôn phím test để test thử đoạn code. Nếu có mail gửi về là thành công được 80% rồi. Tiếp theo chúng ta sẽ đi cài lịch cho Lambda Function chạy vào đầu tháng. Và kết quả thu được sẽ là số tiền đã chi cho tháng trước.\nNếu có lỗi là do chỗ lấy thông tin từ web bị thay đổi. Hoặc là do cookies hết hạn và cần phải lặp lại các bước để lấy lại từ shopee.\n"
},
{
	"uri": "//localhost:1313/vi/4-/4.4.-createreachabilityanalyzer/",
	"title": "Add Trigger và permissions cho S3",
	"tags": [],
	"description": "",
	"content": "Add Trigger và permissions cho S3 Truy cập vào giao diện Lambda\nChọn Function Chọn Crawl_data Tại Function Crawl_data Chọn Add Trigger . Tại giao diện Add trigger Tại bucket chọn S3/workshoph. Event types chọn All object create events . Tích vào ô ở cuối xong ấn add trigger . Configure quyền cho S3 Tại giao diện function Chọn Configuration Chọn Permissions Click đường dẫn ở Role_name . Tại giao diện IAM Chọn Attach policies . Tìm AmazonS3FullAccess và tích vào. Add permissions . Trong dự án thực tế chúng ta sẽ set quyền rất chặt cho việc truy cập vào s3 tuy nhiên để bài lab này được thực hiện đơn giản hơn. Chúng ta sẻ sử dụng quyền cao nhất đối với S3(Full Acess).\n"
},
{
	"uri": "//localhost:1313/vi/4-/",
	"title": "Lấy cookie từ shopee",
	"tags": [],
	"description": "",
	"content": "Lấy cookie từ shopee Ở bước này chúng ta sẽ thực hiện lấy cookie từ shopee\nTruy cập vào Shopee.com Chọn Đơn mua. Tại giao diện Đơn hàng Click chuột phải chọn inspect . Tại giao diện backend Click vào Network . Loading lại trang kém xuống tìm get_all_order_and_checkout_list?limit=5\u0026amp;offset=0 Di chuột vào phần copy. Chọn Copy all as cURL(bash) Mở tab mới và vào link: https://curlconverter.com/ Dán phần vừa copy vào curl command . Tiếp tục copy phần trả về phía dưới. Một điểm đáng chú ý nữa là thi thoảng web bị lỗi trong trường hợp copy nhiều lần thì cái trả về sẽ sinh ra nhiều code và liên tục bị trồng lên nhau. Nếu gặp trường hợp như vậy thì chỉ nên copy từ phần import đến hết respon().\nNội dung Lấy mật khẩu ứng dụng Gmail Trích xuất thông tin file json Thêm code vào Lambda Function "
},
{
	"uri": "//localhost:1313/vi/5-/",
	"title": "Tạo schema cho EventBridge",
	"tags": [],
	"description": "",
	"content": "EventBridge Truy cập vào dịch vụ EventBridge Chọn Rule. Create rule. Điền các thông tin: Name send-email Description - optional notification for shopping Chọn Schedule. Chọn Continue in EventBridge Scheduler. Schedule pattern Chọn Recurring schedule. Tại Schedule type chọn Cron-based-schedule. Tại Cron expression chọn đặt lịch 2h chiều mỗi ngày. Flexible time windown chọn Off.\nSelect target Chọn AWS Lambda . Lambda function chọn Crawl_data. Tiếp tục chọn NEXT 2 lần tiếp theo. Click Create schedule Đợi đến thời gian chỉ định và check thông báo.\nKết quả: Do tháng trước mình không chi tiêu gì trên shopee nên kết quả sẽ là 0đ :)).\nFile bill.csv được lưu vào S3.\nTải xuống để kiểm tra dữ liệu:\nTừ file dữ liệu này bạn có thể tùy ý phân tích theo ý muốn.\nNội dung:\nEventBridge Tạo schedule "
},
{
	"uri": "//localhost:1313/vi/6-/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp tài nguyên Trong bài lab này chúng ta đã sử dụng các dịch vụ S3, Lambda Function, EventBridge. Các dịch vụ này đều có chi phí khá là rẻ và free cho tài khoản 12 tháng nên ko cần phải xóa tài nguyên.\nNếu vẫn muốn xóa thì đây là lần lượt các bước:\nXóa S3 Bucket Vào S3 chọn bucket và chọn workshoph và chọn Empty. sau đó chọn Delete làm theo các hiển thị tiếp theo để xóa.\nXóa shedule EventBridge Vào EventBridge chọn shedule và chọn send-email và chọn Delete.\nXóa Lambda function Vào Lambda function chọn function chọn Crawl_data và chọn Actions chọn Delete để xóa.\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]