[
{
	"uri": "//localhost:1313/vi/1-/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Tạo ChatBot Quản lý chi tiêu qua Telegram Tổng quan Dạo gần đây với sự nổi lên của các chatbot thông minh như OpenAI, Claude, Bing, \u0026hellip; Vì vậy mình cũng muốn tạo ra một con chatbot đơn giản của riêng bản thân. Trong workshop này, bạn sẽ học cách thiết kế và lập trình một chatbot trên Telegram, giúp bạn tiện lợi theo dõi và quản lý chi tiêu cá nhân mà không cần đăng nhập.\nTelegram là một ứng dụng nhắn tin phổ biến, mạnh mẽ và là lựa chọn lý tưởng để phát triển chatbot quản lý chi tiêu.\nCác Service sử dụng: 1. AWS Lambda Function: là dịch vụ điện toán phi máy chủ (serverless) do Amazon cung cấp, cho phép bạn chạy các đoạn mã mà không cần quản lý máy chủ. Với Lambda, bạn chỉ cần tải lên mã của mình và AWS sẽ lo phần còn lại, bao gồm việc cung cấp tài nguyên máy tính và tự động scale mã của bạn dựa trên nhu cầu.\n2. Amazon S3: kho lưu trữ dung lượng lớn, chi phí thấp và an toàn, phù hợp với nhiều nhu cầu lưu trữ dữ liệu.\n3. Amazon DynamoDB: Dịch vụ cơ sở dữ liệu NoSQL hiệu suất cao, tự động điều chỉnh quy mô theo nhu cầu.\n4. API Gateway: Dịch vụ quản lý API giúp tạo, xuất bản, duy trì và bảo mật các API ở bất kỳ quy mô nào.\nWorkshop sẽ tập trung vào các tính năng đơn giản, dễ thực hiện. Người dùng có thể phát triển thêm các tính năng khác dựa trên nhu cầu cá nhân.\nNgôn ngữ chính để phục vụ workshop này là python 3.10\nÝ tưởng: Viết một API Gateway để kết nối với telegram thông qua webhook. API đó được gắn với một lambda function có nhiệm vụ đọc và ghi dữ liệu, truy vấn kết quả truy vấn đến dynamodb. Tùy vào mục đích sử dụng ta có thể sáng tạo công dụng của chatbot theo ý muốn:\nMột số những thống kê có thể kể đến:\nTổng số tiền chi tiêu trong tháng.\nTổng tiền ăn.\nTổng số tiền đổ xăng.\nCác chi tiêu gần nhất.\nBạn có thể làm gì với dữ liệu từ ChatBot Ngoài việc để theo dõi thu chi cá nhân hiện tại. Bạn có thể sử dụng dữ liệu này cho các mô hình machine learning đơn giản để dự báo chi tiêu cũng như đưa ra cảnh báo nếu như thu chi bị biến động quá nhiều. Hoặc đưa gia các gợi ý thích hợp và chi tiêu thích hợp cho các tháng tiếp theo.\nNội dung Giới thiệu Tạo chatbot trên Telegram Các bước chuẩn bị Tạo API Gateway Tạo bảng trong DynamoDB Sử dụng Chatbot Dọn dẹp tài nguyên Bây giờ chúng ta sẽ cùng nhau đi qua các khái niệm cơ bản nhất của Lambda Function.\n"
},
{
	"uri": "//localhost:1313/vi/1-/1.1-chatbot/",
	"title": "Giới thiệu ChatBot",
	"tags": [],
	"description": "",
	"content": "Chatbot là gì Chatbot là một ứng dụng phần mềm được thiết kế để tương tác với người dùng thông qua các cuộc trò chuyện tự động. Chatbot có thể hiểu và trả lời các câu hỏi của người dùng, thực hiện các tác vụ đơn giản hoặc phức tạp, và giúp cải thiện trải nghiệm người dùng bằng cách cung cấp thông tin và dịch vụ nhanh chóng.\nỨng dụng của ChatBot Dịch vụ khách hàng: Chatbot có thể cung cấp hỗ trợ khách hàng 24/7, giải đáp các câu hỏi thường gặp, xử lý khiếu nại và hỗ trợ kỹ thuật. Thương mại điện tử: Chatbot có thể giúp người dùng tìm kiếm sản phẩm, cung cấp thông tin về giá cả và khuyến mãi, và thậm chí hỗ trợ quá trình mua hàng. Giáo dục: Chatbot có thể cung cấp các khóa học trực tuyến, trả lời câu hỏi của học viên và cung cấp tài liệu học tập. Y tế: Chatbot có thể cung cấp thông tin về sức khỏe, đặt lịch hẹn với bác sĩ và nhắc nhở uống thuốc. Giải trí: Chatbot có thể cung cấp thông tin về phim, nhạc, sách, và các hoạt động giải trí khác. BotFather BotFather là một bot đặc biệt trên Telegram được sử dụng để tạo và quản lý các bot khác. Đây là bước đầu tiên để bắt đầu xây dựng một bot trên Telegram.\nCác bước tạo bot với BotFather Tạo bot: Mở Telegram và tìm kiếm BotFather, sau đó bắt đầu cuộc trò chuyện với BotFather và sử dụng lệnh /newbot để tạo bot mới. Đặt tên và username cho bot: BotFather sẽ yêu cầu bạn cung cấp tên và username cho bot. Username phải kết thúc bằng \u0026ldquo;bot\u0026rdquo;. Nhận API token: Sau khi tạo bot thành công, BotFather sẽ cung cấp cho bạn một API token. Token này sẽ được sử dụng để xác thực và tương tác với Telegram API. "
},
{
	"uri": "//localhost:1313/vi/4-/4.1/",
	"title": "Tạo API Gateway",
	"tags": [],
	"description": "",
	"content": "Tạo API Gateway Tại giao diện console tìm API Gateway Tại giao diện API Gateway chọn Create API Chọn loại HTTP API\nChọn Build Điền các thông tin cơ bản cho API\nIntegrations: Lambda Lambda function: chọn ARN của BotTele function API name: TeleConnect Chọn Next Tiếp tục chọn Next Tiếp tục chọn Next\nChọn Create "
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Tạo ChatBot Quản lý chi tiêu qua Telegram",
	"tags": [],
	"description": "",
	"content": "Tạo ChatBot Quản lý chi tiêu qua Telegram Tổng quan Bạn đã bao giờ nghĩ đến việc có một trợ lý ảo để quản lý chi tiêu hàng ngày của mình chưa? Trong bài lab workshop hôm nay sẽ hướng dẫn bạn biến ý tưởng này thành hiện thực. Bằng cách thiết kế và lập trình một chatbot trên nền tảng Telegram, không cần đăng nhập, thuận tiện trong việc sử dụng. Do bản thân mình sủ dụng telegram rất nhiều trong các công việc hằng ngày nên một chatbot có sẵn ở telegram sẽ là một lựa chọn lý tưởng giúp bạn theo dõi và quản lý chi tiêu các nhân một cách thông minh và hiệu quả.\nTelegram là một ứng dụng nhắn tin phổ biến và mạnh mẽ với nhiều ưu điểm vượt trội, khiến nó trở thành lựa chọn lý tưởng để phát triển và triển khai chatbot quản lý chi tiêu.\nCác Service sử dụng: 1. AWS Lambda Function: là dịch vụ điện toán phi máy chủ (serverless) do Amazon cung cấp, cho phép bạn chạy các đoạn mã mà không cần quản lý máy chủ. Với Lambda, bạn chỉ cần tải lên mã của mình và AWS sẽ lo phần còn lại, bao gồm việc cung cấp tài nguyên máy tính và tự động scale mã của bạn dựa trên nhu cầu.\n2. Amazon S3: - một kho lưu trữ cho internet. Nó được thiết kế để cung cấp lưu trữ dung lượng lớn, chi phí thấp trên nhiều khu vực địa lý. Amazon S3 cung cấp cho các nhà phát triển và nhóm CNTT bộ lưu trữ đối tượng An toàn, Bền bỉ và có khả năng mở rộng cao.\nS3 gần như có thể lưu trữ dữ liệu không giới hạn (Theo quảng cáo của AWS). S3 có các cấp lưu trữ, tùy theo nhu cầu, theo tính chất của dữ liệu, thời gian truy cập thì giá sẽ rẻ hơn.\n3. Amazon DynamoDB: một dịch vụ cơ sở dữ liệu phi quan hệ NoSQL được quản lý hoàn toàn, có thể mở rộng cao và hiệu suất cao cho các ứng dụng cần tốc độ và khả năng mở rộng. Cơ sở dữ liệu này phản hồi chỉ trong vài mili giây ở mọi quy mô.\nKhi quy mô của cơ sở dữ liệu tăng hoặc giảm, DynamoDB sẽ tự động thay đổi quy mô để điều chỉnh phù hợp với thay đổi về công suất, trong khi vẫn duy trì hiệu năng ổn định. Nhờ đó, đây là sự lựa chọn phù hợp với các trường hợp sử dụng yêu cầu hiệu năng cao và quy mô linh hoạt.\n4. API Gateway: một dịch vụ được quản lý hoàn toàn bởi Amazon Web Services (AWS) giúp các nhà phát triển tạo, xuất bản, duy trì, giám sát và bảo mật các API ở bất kỳ quy mô nào. Đây là một điểm truy cập duy nhất để quản lý tất cả các yêu cầu từ client đến các dịch vụ backend, chẳng hạn như ứng dụng chạy trên Amazon EC2, AWS Lambda, hoặc bất kỳ điểm cuối web nào khác.\n→ Tuy nhiên để đơn giản và demo một cách thuận tiện nhất có thể bài lab chỉ thực hiện một số những tính năng đơn giản và có thể thực hiện được ngay. Độc giả có thể dễ dàng phát triển thêm các tinh năng khác dựa theo từng nhu cầu và đặc điểm của bản thân.\nNgôn ngữ chính để phục vụ workshop này là python 3.10 Nội dung Giới thiệu Tạo chatbot trên Telegram Các bước chuẩn bị Tạo API Gateway Tạo bảng trong DynamoDB Sử dụng Chatbot Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/3-/3.1-createvpc/",
	"title": "Tạo S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Tạo S3 Bucket Truy cập giao diện AWS Management Console\nTìm S3 Chọn Bucket Chọn Create Bucket Điền tên bucket là bottele Tên Bucket phải là duy nhất và không được trùng với tên các bucket đã có.\n3. Chọn Create Bucket\n"
},
{
	"uri": "//localhost:1313/vi/6/6.1/",
	"title": "Thêm code vào lambda function",
	"tags": [],
	"description": "",
	"content": "Thêm code vào lambda function Truy cập lại giao diện Lambda function vừa tạo ở bước 3.2 Chọn function Chọn function BotTele Tại giao diện code Lambda function Copy đoạn code sau vào ô code: import json import requests import boto3 from datetime import datetime client = boto3.resource(\u0026#39;dynamodb\u0026#39;) def get_current_month_statistics(): try: table = client.Table(\u0026#39;Spend-me\u0026#39;) response = table.scan() total_spend = 0 total_food_spend = 0 total_fuel_spend = 0 current_date = datetime.now() current_month = current_date.month current_year = current_date.year for item in response[\u0026#39;Items\u0026#39;]: if \u0026#39;spend\u0026#39; in item and item[\u0026#39;spend\u0026#39;].isdigit(): spend_amount = int(item[\u0026#39;spend\u0026#39;]) else: continue if \u0026#39;date\u0026#39; in item and \u0026#39;-\u0026#39; in item[\u0026#39;date\u0026#39;]: date = item[\u0026#39;date\u0026#39;] date_parts = date.split(\u0026#39;-\u0026#39;) if len(date_parts) == 3: item_month = int(date_parts[1]) item_year = int(date_parts[2]) if item_month != current_month or item_year != current_year: continue total_spend += spend_amount if \u0026#39;spend_name\u0026#39; in item: spend_name = item[\u0026#39;spend_name\u0026#39;].lower() if \u0026#39;ăn\u0026#39; in spend_name: total_food_spend += spend_amount elif \u0026#39;đổ xăng\u0026#39; in spend_name: total_fuel_spend += spend_amount return total_spend, total_food_spend, total_fuel_spend except Exception as e: print(f\u0026#34;Error in get_current_month_statistics: {e}\u0026#34;) raise def lambda_handler(event, context): try: body = json.loads(event[\u0026#39;body\u0026#39;]) chat_id = body[\u0026#39;message\u0026#39;][\u0026#39;chat\u0026#39;][\u0026#39;id\u0026#39;] message_text = body[\u0026#39;message\u0026#39;][\u0026#39;text\u0026#39;] url = \u0026#34;https://api.telegram.org/bot\u0026lt;bot-token\u0026gt;/sendMessage\u0026#34; if message_text.startswith(\u0026#39;/sum\u0026#39;): total_spend, total_food_spend, total_fuel_spend = get_current_month_statistics() response_text = (f\u0026#34;Đây là thống kê chi tiết chi tiêu tháng này của bạn:\\n\u0026#34; f\u0026#34;Tổng chi tiêu: {total_spend}\\n\u0026#34; f\u0026#34;Tổng tiền ăn: {total_food_spend}\\n\u0026#34; f\u0026#34;Tổng tiền đổ xăng: {total_fuel_spend}\u0026#34;) elif message_text.startswith(\u0026#39;/chi\u0026#39;): parts = message_text.split(\u0026#39;|\u0026#39;) if len(parts) == 3: spend = int(parts[0].strip().split()[1]) # Extract the amount from the command spend_name = parts[1].strip() # Extract the spend name date = parts[2].strip() # Extract the date formatted_date = datetime.strptime(date, \u0026#39;%d-%m-%Y\u0026#39;).strftime(\u0026#39;%Y-%m-%d\u0026#39;) # Format the date properly table = client.Table(\u0026#39;\u0026lt;table-name\u0026gt;\u0026#39;) response = table.put_item( Item={ \u0026#39;id\u0026#39;: str(datetime.now().timestamp()), \u0026#39;spend\u0026#39;: str(spend), \u0026#39;spend_name\u0026#39;: spend_name, \u0026#39;date\u0026#39;: formatted_date } ) response_text = \u0026#34;Dữ liệu đã ghi vào cơ sở dữ liệu thành công.\u0026#34; else: response_text = \u0026#34;Sai định dạng. Định dạng đúng: /chi 10000 | Mua áo | 12-7-2023\u0026#34; elif message_text.startswith(\u0026#39;/show\u0026#39;): table = client.Table(\u0026#39;Spend-me\u0026#39;) response = table.scan(Limit=5) items = response[\u0026#39;Items\u0026#39;] response_text = \u0026#34;Top 5 ghi chép mới nhất:\\n\u0026#34; for item in items: response_text += f\u0026#34;- ID: {item.get(\u0026#39;id\u0026#39;, \u0026#39;N/A\u0026#39;)}, Spend: {item.get(\u0026#39;spend\u0026#39;, \u0026#39;0\u0026#39;)}, Name: {item.get(\u0026#39;spend_name\u0026#39;, \u0026#39;N/A\u0026#39;)}, Date: {item.get(\u0026#39;date\u0026#39;, \u0026#39;N/A\u0026#39;)}\\n\u0026#34; else: response_text = \u0026#34;Lệnh không hợp lệ. Vui lòng sử dụng /chi để nhập chi tiêu hoặc /sum để xem thống kê.\u0026#34; payload = {\u0026#39;chat_id\u0026#39;: chat_id, \u0026#39;text\u0026#39;: response_text} requests.post(url, json=payload) return {\u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: json.dumps({\u0026#34;message\u0026#34;: \u0026#34;Success\u0026#34;})} except Exception as e: print(f\u0026#34;Error in lambda_handler: {e}\u0026#34;) return {\u0026#34;statusCode\u0026#34;: 500, \u0026#34;body\u0026#34;: json.dumps({\u0026#34;message\u0026#34;: \u0026#34;Error\u0026#34;})} Những cái cần sửa:\n\u0026lt;bot-token\u0026gt;: token lấy của chatbot tại bước 2\n\u0026lt;table-name\u0026gt;: tên bảng Dynamodb đã tạo\nCác bạn có thể để id tự tăng hoặc để theo ngày tháng giống mình :))\nNhấn Deploy để lưu code: Code được lưu thành công "
},
{
	"uri": "//localhost:1313/vi/6/6.2/",
	"title": "Chat với ChatBot",
	"tags": [],
	"description": "",
	"content": "Chat với ChatBot Truy cập tài khoản tele của bạn và tìm TeleBot Thêm dữ liệu cho chatbot /chi \u0026lt;số tiền\u0026gt; | \u0026lt;tên khoản chi tiêu\u0026gt; | \u0026lt;ngày\u0026gt; Hiển thị 5 chi tiêu gần nhất /show Xem thống kê chi tiêu trong tháng /sum "
},
{
	"uri": "//localhost:1313/vi/4-/4.2/",
	"title": "Connect với webhook bằng postman",
	"tags": [],
	"description": "",
	"content": "Connect với webhook Truy cập giao diện Postman: https://www.postman.com Chọn Workspace Tại workspace tạo một tab làm việc mới Quay lại giao diện API Gateway Copy Invoke URL: https://vdmj0zewl4.execute-api.us-east-1.amazonaws.com Chọn Body Điền địa chỉ https://api.telegram.org/bot\u0026lt;token-botTele\u0026gt;/setWebhook. \u0026lt;token-botTele\u0026gt; là link token tạo bot Telegram ban đầu Tại Key điền: url Tại Value điền: https://vdmj0zewl4.execute-api.us-east-1.amazonaws.com/\u0026lt;Lambda-function-name\u0026gt; vừa lấy ở bước 3 (Invoke URL) Nhấn Send Response trả về như trong ảnh là ok { \u0026#34;ok\u0026#34;: true, \u0026#34;result\u0026#34;: true, \u0026#34;description\u0026#34;: \u0026#34;Webhook was set\u0026#34; } "
},
{
	"uri": "//localhost:1313/vi/2-/",
	"title": "Tạo ChatBot trên Telegram",
	"tags": [],
	"description": "",
	"content": "Tạo ChatBot từ BotFather Các bước tạo bot với BotFather Tạo bot: Mở Telegram và tìm kiếm BotFather, sau đó bắt đầu cuộc trò chuyện với BotFather và sử dụng lệnh /newbot để tạo bot mới.\nĐặt tên và username cho bot: BotFather sẽ yêu cầu bạn cung cấp tên và username cho bot. Username phải kết thúc bằng \u0026ldquo;bot\u0026rdquo;.\nNhận API token: Sau khi tạo bot thành công, BotFather sẽ cung cấp cho bạn một API token. Token này sẽ được sử dụng để xác thực và tương tác với Telegram API.\nMở Telegram và tìm kiếm FatherBot\nMở Telegram Chọn FatherBot Bấm nút Start để bắt đầu Gõ các lệnh để tương tác với Bot Father.\nGõ lệnh /newbot Tiếp tục nhập tên bot. Ở đây mình đặt tên cho bot là TeleBotchitieu_bot. Đây cũng chính là username của Bot Tên Bot phải là duy nhất và kết thúc bằng bot. Ví dụ TeleBot.\nCopy thông tin token của bot và lưu tạm ở một nơi nào đó. Token bot của mình 7347673296:AAGfZlAMdqqh80K9X2sJkMYvVBna0EyjcYM\nNhấn vào đường dẫn để trỏ tới bot mới tạo. Vậy là sau một vài bước đơn giản chúng ta đã tạo được một con bot trên Telegram. Tiếp theo chúng ta sẽ thực hiện để con Bot này thực hiện các hành động theo ý muốn bằng cách tương tác với api thông qua webhooks.\n"
},
{
	"uri": "//localhost:1313/vi/3-/3.2-createsubnet/",
	"title": "Tạo Lambda Function",
	"tags": [],
	"description": "",
	"content": "Tạo Lambda Function Trong giao diện AWS Management Console\nChọn Lambda Tại function. Chọn Create function Đặt tên function là BotTele\nĐể verion 3.10 Chọn Create function Tăng timeout cho function Click vào function vừa tạo BotTele Tại giao diện function chọn Configurations Chọn General Configurations Tiếp tục chọn Edit Đặt description là increase timeout\nChỉnh timeout lên 1p Nhấn Save\nCấu hình quyền cho Lambda. Tại giao diện lambda function\nChọn Configuration Chọn Permissons Click vào đường dẫn dưới Role name Tại giao diện IAM\nChọn Role Chọn Add Permission Tìm role **Tìm role AmazonS3FullAccess Tìm role AmazonDynamoDBFullAccess Chọn Add Permission Do đây chỉ là một bài workshop đơn giản nên chúng ta sẽ cấu hình lỏng cho lambda bằng các quyền truy cập mạnh nhất (Full Access)\n"
},
{
	"uri": "//localhost:1313/vi/1-/1.2-webhook/",
	"title": "Webhook",
	"tags": [],
	"description": "",
	"content": "Webhook Webhook là một cách để các ứng dụng web nhận thông tin theo thời gian thực. Khi sự kiện xảy ra tại một hệ thống, webhook sẽ gửi dữ liệu tự động tới URL khác thông qua một HTTP request. Điều này cho phép hệ thống phản ứng ngay lập tức với các thay đổi dữ liệu hoặc sự kiện mà không cần phải kiểm tra dữ liệu định kỳ.\nCách hoạt động của webhook tương tự như một mạch phản hồi: khi có tín hiệu đầu vào (sự kiện), mạch này sẽ phát tín hiệu đầu ra (HTTP request) ngay lập tức đến điểm cuối đã cấu hình sẵn. Điều này hữu ích trong các ứng dụng mà bạn cần cập nhật dữ liệu liên tục và nhanh chóng như thông báo, đồng bộ hóa dữ liệu giữa các dịch vụ, hay tự động hóa các quy trình làm việc.\nVí dụ, bạn có thể cấu hình một webhook trong hệ thống quản lý dữ liệu khách hàng (CRM) để khi một khách hàng mới được thêm vào, hệ thống tự động gửi thông tin khách hàng này qua webhook đến hệ thống tiếp thị qua email để bắt đầu một chiến dịch tiếp cận.\nLưu ý: một webhook chỉ connect tới 1 API tại một thời điểm. Nên chúng ta\n"
},
{
	"uri": "//localhost:1313/vi/3-/3.3-createigw/",
	"title": "Add Layer",
	"tags": [],
	"description": "",
	"content": "Add Layer Trong giao diện BotTele\nKéo xuống cuối chọn Add Layer Mở tab mới và truy cập link https://github.com/keithrozario/Klayers Trong phần README chọn List of ARNs Chọn version Python 3.10 Chọn region US East (N. Virginia) Chọn html Copy ARN 2 layer cần thiết: request pymssql Quy lại giao diện Add layer Chọn Specify an ARN Copy đường dẫn 2 layer vào ô chọn Chọn Verify Chọn Add Làm tương tự với layer còn lại. Nếu ấn Verify xuất hiện như trong ảnh dưới là ok\nSau khi thêm xong các layer sẽ có giao diện đủ 2 layer như sau: "
},
{
	"uri": "//localhost:1313/vi/3-/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Các bước chuẩn bị Trong bài thực hành này, chúng ta sẽ xây dựng một mô hình theo sơ đồ bên dưới:\nNội dung Tạo S3 Bucket Tạo Lambda Function Add Layer "
},
{
	"uri": "//localhost:1313/vi/6/6.3/",
	"title": "Check Log lambda",
	"tags": [],
	"description": "",
	"content": "Check Log lambda Tại giao diện lambda Chọn Monitor Chọn View CloudWatch Logs Kiểm tra log mới nhất Các thông tin lambda function phản hồi Check log là quá trình hiệu quả để tìm ra các lỗi khi chạy lambda function. Mình đã gặp rất nhiều lỗi và bằng các check log trả ra để hiểu và sửa lỗi\n"
},
{
	"uri": "//localhost:1313/vi/1-/1.3-layer/",
	"title": "Layer",
	"tags": [],
	"description": "",
	"content": "Về Layer Layer ở đây là các package, bên ngoài các method gốc của ngôn ngữ lập trình thông thường. Để đơn giản hãy tưởng tượng layer tương tự như các thư viện trong python và mình chỉ việc import vào và sử dụng nó như bình thường(mặc định lambda function không có sẵn các thư viện mà phải thêm vào thông qua layers).\nMỗi Lambda function được add tối đa 5 layers.\nMột lambda function không thể thêm nhiều layer quá số bit cho trước nếu thêm quá sẽ hiện cảnh báo đỏ.\nCó 2 cách để thêm layer:\nThêm trực tiếp bằng cách zip các file trong thư viện gốc rồi đẩy lên layer (tốn thời gian để nén và có khi ko ăn với lambda hoặc cũng có thể zip thiếu). Cũng zip lại và tải trực tiếp vào lambda function. The layer bằng cách copy ARNs(của những người đã tạo trước đó) cùng với version tương ứng. Link ARNs tham khảo: https://github.com/keithrozario/Klayers\n"
},
{
	"uri": "//localhost:1313/vi/6/6.4/",
	"title": "Export to S3",
	"tags": [],
	"description": "",
	"content": "Export to S3 Sau một thời gian dài sử dụng chatbot (1 y or hơn) bạn có thể đẩy dữ liệu của mình ra S3 để lưu trữ. Hoặc trong trường hợp muốn xóa chatbot và các tài nguyên liên quan.\nTại giao diện DynamoDB\nChọn Export to S3 Chọn Export to S3 Điền các thông tin export\nSource table: Spend-me Destination: S3://bottele Chọn Export Quá trình export bắt đầu Kiểm tra dữ liệu export trong S3 Dữ liệu chi tiêu cá nhân được tải về dưới dạng json "
},
{
	"uri": "//localhost:1313/vi/4-/",
	"title": "Lấy cookie từ shopee",
	"tags": [],
	"description": "",
	"content": "Lấy cookie từ shopee Ở bước này chúng ta sẽ thực hiện lấy cookie từ shopee\nTruy cập vào Shopee.com Chọn Đơn mua. Tại giao diện Đơn hàng Click chuột phải chọn inspect . Tại giao diện backend Click vào Network . Loading lại trang kém xuống tìm get_all_order_and_checkout_list?limit=5\u0026amp;offset=0 Di chuột vào phần copy. Chọn Copy all as cURL(bash) Mở tab mới và vào link: https://curlconverter.com/ Dán phần vừa copy vào curl command . Tiếp tục copy phần trả về phía dưới. Một điểm đáng chú ý nữa là thi thoảng web bị lỗi trong trường hợp copy nhiều lần thì cái trả về sẽ sinh ra nhiều code và liên tục bị trồng lên nhau. Nếu gặp trường hợp như vậy thì chỉ nên copy từ phần import đến hết respon().\nNội dung Lấy mật khẩu ứng dụng Gmail Trích xuất thông tin file json Thêm code vào Lambda Function "
},
{
	"uri": "//localhost:1313/vi/1-/1.4-api/",
	"title": "Về API",
	"tags": [],
	"description": "",
	"content": "Giới thiệu API API là viết tắt của Application Programming Interface (Giao diện lập trình ứng dụng), một phần mềm trung gian cho phép hai ứng dụng nói chuyện với nhau. Mỗi khi sử dụng một ứng dụng như Facebook, gửi tin nhắn tức thì hoặc kiểm tra thời tiết trên điện thoại, có nghĩa là bạn đang sử dụng API.\nĐể hình dung dễ hiểu hơn về API thì mọi người hình dung API nó giống như một cái hàm và có tham số cụ thể(Nếu không có giới hạn tham số thì API có thể yêu cầu mọi từ server).\nTùy theo loại API mà có giới hạn requests truy cập riêng\nServer thì như một đôi tai liên tục lắng nghe tin hiệu từ API và trả về những thứ theo yêu cầu thực hiện của API\n"
},
{
	"uri": "//localhost:1313/vi/5-/",
	"title": "Tạo bảng trong dynamodb",
	"tags": [],
	"description": "",
	"content": "Tạo bảng trong DynamoDB Tại giao diện console, tìm kiếm DynamoDB Tiến hành tạo bảng: Chọn Table Chọn Create Table Điền các thông tin cho bảng: Table name: Spend-me Partition key: id, kiểu dữ liệu String Sort key: spend, kiểu dữ liệu Number Ta không cần phải tạo hết các cột cần thiết mà chỉ cần tạo partition key và sort key\nClick Create Table để tiến hành tạo bảng Sau một lúc thì bảng tạo thành cộng với trạng thái Active Xem dữ liệu trong bảng: Quay lại giao diện DynamoDB chọn Explore items Chọn bảng Spend-me Trên là một số dữ liệu mình đã thêm vào từ trước\n"
},
{
	"uri": "//localhost:1313/vi/6/",
	"title": "Sử dụng ChatBot",
	"tags": [],
	"description": "",
	"content": "Sử dụng ChatBot Sau khi Các công đoạn cài đặt và cấu hình đã hoàn tất. Chúng ta đến bước khai thác và sử dụng chatbot.\nNội dung:\nThêm code vào lambda function Chat với chatbot Check log Export to S3 "
},
{
	"uri": "//localhost:1313/vi/7-/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp tài nguyên Trong bài lab này chúng ta đã sử dụng các dịch vụ S3, Lambda Function, DynamoDB, API Gateway. Các dịch vụ này đều có chi phí khá là rẻ và free cho tài khoản 12 tháng nên ko cần phải xóa tài nguyên.\nNếu vẫn muốn xóa thì đây là lần lượt các bước:\nXóa S3 Bucket Vào S3 chọn bucket và chọn workshoph và chọn Empty. sau đó chọn Delete làm theo các hiển thị tiếp theo để xóa.\nXóa Lambda function Vào Lambda function chọn function chọn BotTele và chọn Actions chọn Delete để xóa.\nXóa API Gateway Vào API Gateway tìm API vừa tạo chọn Delete\nXóa bảng DynamoDB Vào DynamoDB chọn Table và chọn bảng Spend-me chọn Delete làm theo các hiển thị để xóa.\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]